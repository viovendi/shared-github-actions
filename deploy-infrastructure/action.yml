name: Deploy infrastructure
inputs:
  microservice-name:
    description: Microservice short name
    required: true
  environment:
    description: Environment
    required: true
  cf-stack-name-suffix:
    description: CloudFormation stack name suffix with trailing '-' (e.g. -database)
    required: false
    default: ''
  cf-template-path:
    description: CloudFormation template path in the repository (e.g. ./infrastructure/infrastructure.yml)
    required: false
    default: './infrastructure/infrastructure.yml'
  cf-parameters:
    description: CloudFormation parameters divided by whitespace, Infrastructure parameter should not be specified (e.g. ImageTag=123 CustomParameter=value)
    required: false
    default: ''
runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Get current branch name
      id: get-current-branch-name
      uses: viovendi/shared-github-actions/get-current-branch-name@master

    - name: Package infrastructure
      shell: bash
      run: |
        aws cloudformation package \
          --template-file ${{ inputs.cf-template-path }} \
          --s3-bucket doo-infrastructure \
          --s3-prefix ${{ inputs.microservice-name }} \
          --output-template-file ./infrastructure/compiled.yml

    - name: Deploy infrastructure
      shell: bash
      run: |
        if [[ "${{ inputs.environment }}" =~ ^staging[1-8]$ ]] || ([[ "${{ inputs.environment }}" =~ ^production[1-3]$ ]] && ([[ "${{ steps.get-current-branch-name.outputs.branch-name }}" = "master" ]] || [[ "${{ steps.get-current-branch-name.outputs.branch-name }}" =~ ^release_.+$ ]])); 
        then
          aws cloudformation deploy \
            --template-file ./infrastructure/compiled.yml \
            --stack-name ${{ format('{0}-{1}{2}', inputs.microservice-name, inputs.environment, inputs.cf-stack-name-suffix) }} \
            --s3-bucket doo-infrastructure \
            --s3-prefix ${{ inputs.microservice-name }} \
            --parameter-overrides Infrastructure=${{ inputs.environment }} ${{ inputs.cf-parameters }} \
            --capabilities CAPABILITY_IAM
          exit 0
        elif [[ "${{ inputs.environment }}" =~ ^production[1-3]$ ]]; 
        then
          echo "Production infrastructure can be deployed only from the following branches: master, release_*"
          exit 1
        else
          echo "Unrecognizable environment name"
          exit 1
        fi

    - name: Get current commit hash
      id: get-current-commit-hash
      uses: viovendi/shared-github-actions/get-current-commit-hash@master

    # Run only for deployments to production
    - name: Create release tag
      uses: actions/github-script@v5
      with:
        script: |
          const environment = '${{ inputs.environment }}';
          if(!environment.includes('production')){
            core.info('The release tag creation is skipped for non-production deployment')
            return;
          }

          const date = new Date();
          const [month, day, year] = [date.getUTCMonth(), date.getUTCDate(), date.getUTCFullYear()];
          const [hour, minutes, seconds, milliseconds] = [date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds()];
          const dateString = `${year}-${month}-${day}_${hour}-${minutes}-${seconds}-${milliseconds}Z`
          const tagName = `release_${dateString}`;
          const releaseName = `release_${dateString} (stack: ${{ format('{0}-{1}{2}', inputs.microservice-name, inputs.environment, inputs.cf-stack-name-suffix) }})`

          const tagResult = await github.rest.git.createTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: tagName,
            message: 'Create a release tag on the commit after successful deployment from the master branch',
            object: '${{ steps.get-current-commit-hash.outputs.commit-hash }}',
            type: 'commit'
          });

          if (tagResult.status !== 201) {
            core.setFailed(`The tag creation is failed`);
            return;
          }

          // From GitHub API docs: 
          // Note that creating a tag object does not create the reference that makes a tag in Git. 
          // If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then create the refs/tags/[tag] reference.
          const referenceResult = await github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `refs/tags/${tagName}`,
            sha: '${{ steps.get-current-commit-hash.outputs.commit-hash }}'
          });

          if (referenceResult.status !== 201) {
            core.setFailed(`The reference creation is failed`);
            return;
          }

          const releaseResult = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tagName,
            name: releaseName,
            generate_release_notes: true
          });

          if (referenceResult.status !== 201) {
            core.setFailed(`The release creation is failed`);
            return;
          }
